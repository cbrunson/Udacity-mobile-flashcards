{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/carlbrunson/Documents/Code/Udacity-mobile-flashcard-app/components/DeckList.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\n\nvar DeckList = function (_React$Component) {\n  _inherits(DeckList, _React$Component);\n\n  var _super = _createSuper(DeckList);\n\n  function DeckList() {\n    _classCallCheck(this, DeckList);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DeckList, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var decks = this.props.decks;\n      var deckData = Object.keys(decks).map(function (id) {\n        return decks[id];\n      });\n\n      if (deckData.length <= 0) {\n        return React.createElement(View, {\n          style: {\n            flex: 1,\n            justifyContent: 'center',\n            paddingHorizontal: 20\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 12,\n            columnNumber: 9\n          }\n        }, React.createElement(Text, {\n          style: {\n            textAlign: 'center',\n            fontSize: 20\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 13,\n            columnNumber: 11\n          }\n        }, \"No decks available! Try creating one with Add Deck.\"));\n      }\n\n      return React.createElement(FlatList, {\n        style: {\n          flex: 1\n        },\n        data: deckData,\n        renderItem: function renderItem(_ref) {\n          var item = _ref.item;\n          return React.createElement(View, {\n            style: {\n              justifyContent: 'center',\n              padding: 40,\n              borderBottomWidth: 1,\n              borderBottomColor: 'lightgray'\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 23,\n              columnNumber: 13\n            }\n          }, React.createElement(TouchableOpacity, {\n            onPress: function onPress() {\n              return _this.props.navigation.navigate('Deck', {\n                deck: item\n              });\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 24,\n              columnNumber: 15\n            }\n          }, React.createElement(View, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 25,\n              columnNumber: 17\n            }\n          }, React.createElement(Text, {\n            style: {\n              textAlign: 'center',\n              fontSize: 18,\n              color: 'black',\n              paddingVertical: 10,\n              fontWeight: 'bold'\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 26,\n              columnNumber: 19\n            }\n          }, item.title), React.createElement(Text, {\n            style: {\n              textAlign: 'center',\n              fontSize: 16,\n              color: 'darkgray'\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 27,\n              columnNumber: 19\n            }\n          }, Object.keys(item.flashcards || {}).length, \" cards\"))));\n        },\n        keyExtractor: function keyExtractor(item) {\n          return item.id;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 7\n        }\n      });\n    }\n  }]);\n\n  return DeckList;\n}(React.Component);\n\nfunction mapStateToProp(state) {\n  return state;\n}\n\nexport default connect(mapStateToProp)(DeckList);","map":{"version":3,"sources":["/Users/carlbrunson/Documents/Code/Udacity-mobile-flashcard-app/components/DeckList.js"],"names":["React","connect","DeckList","decks","props","deckData","Object","keys","map","id","length","flex","justifyContent","paddingHorizontal","textAlign","fontSize","item","padding","borderBottomWidth","borderBottomColor","navigation","navigate","deck","color","paddingVertical","fontWeight","title","flashcards","Component","mapStateToProp","state"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;;;;;;IAGMC,Q;;;;;;;;;;;;;6BACK;AAAA;;AAAA,UACCC,KADD,GACW,KAAKC,KADhB,CACCD,KADD;AAEP,UAAME,QAAQ,GAAGC,MAAM,CAACC,IAAP,CAAYJ,KAAZ,EAAmBK,GAAnB,CAAuB,UAAAC,EAAE;AAAA,eAAIN,KAAK,CAACM,EAAD,CAAT;AAAA,OAAzB,CAAjB;;AAEA,UAAIJ,QAAQ,CAACK,MAAT,IAAmB,CAAvB,EAA0B;AACxB,eACE,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAE;AAACC,YAAAA,IAAI,EAAE,CAAP;AAAUC,YAAAA,cAAc,EAAE,QAA1B;AAAoCC,YAAAA,iBAAiB,EAAE;AAAvD,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAE;AAACC,YAAAA,SAAS,EAAE,QAAZ;AAAsBC,YAAAA,QAAQ,EAAE;AAAhC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iEADF,CADF;AAKD;;AACD,aACE,oBAAC,QAAD;AACE,QAAA,KAAK,EAAE;AAAEJ,UAAAA,IAAI,EAAE;AAAR,SADT;AAEE,QAAA,IAAI,EAAEN,QAFR;AAGE,QAAA,UAAU,EAAE,0BAAc;AAAA,cAAXW,IAAW,QAAXA,IAAW;AACxB,iBACE,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAE;AAAEJ,cAAAA,cAAc,EAAE,QAAlB;AAA4BK,cAAAA,OAAO,EAAE,EAArC;AAAyCC,cAAAA,iBAAiB,EAAE,CAA5D;AAA+DC,cAAAA,iBAAiB,EAAE;AAAlF,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE,oBAAC,gBAAD;AAAkB,YAAA,OAAO,EAAE;AAAA,qBAAM,KAAI,CAACf,KAAL,CAAWgB,UAAX,CAAsBC,QAAtB,CAA+B,MAA/B,EAAuC;AAACC,gBAAAA,IAAI,EAAEN;AAAP,eAAvC,CAAN;AAAA,aAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAE;AAACF,cAAAA,SAAS,EAAE,QAAZ;AAAsBC,cAAAA,QAAQ,EAAE,EAAhC;AAAoCQ,cAAAA,KAAK,EAAE,OAA3C;AAAoDC,cAAAA,eAAe,EAAE,EAArE;AAAyEC,cAAAA,UAAU,EAAE;AAArF,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAA6GT,IAAI,CAACU,KAAlH,CADF,EAEE,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAE;AAACZ,cAAAA,SAAS,EAAE,QAAZ;AAAsBC,cAAAA,QAAQ,EAAE,EAAhC;AAAoCQ,cAAAA,KAAK,EAAE;AAA3C,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAuEjB,MAAM,CAACC,IAAP,CAAYS,IAAI,CAACW,UAAL,IAAmB,EAA/B,EAAmCjB,MAA1G,WAFF,CADF,CADF,CADF;AAUD,SAdH;AAeE,QAAA,YAAY,EAAE,sBAACM,IAAD;AAAA,iBAAUA,IAAI,CAACP,EAAf;AAAA,SAfhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAmBD;;;;EA/BoBT,KAAK,CAAC4B,S;;AAkC7B,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC7B,SAAOA,KAAP;AACD;;AAED,eAAe7B,OAAO,CAAC4B,cAAD,CAAP,CAAwB3B,QAAxB,CAAf","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux'\nimport { View, Text, FlatList, TouchableOpacity } from 'react-native'\n\nclass DeckList extends React.Component {\n  render() {\n    const { decks } = this.props;\n    const deckData = Object.keys(decks).map(id => decks[id]);\n\n    if (deckData.length <= 0) {\n      return (\n        <View style={{flex: 1, justifyContent: 'center', paddingHorizontal: 20}}>\n          <Text style={{textAlign: 'center', fontSize: 20}}>No decks available! Try creating one with Add Deck.</Text>\n        </View>\n      );\n    }\n    return (\n      <FlatList\n        style={{ flex: 1}}\n        data={deckData}\n        renderItem={({ item }) => {\n          return (\n            <View style={{ justifyContent: 'center', padding: 40, borderBottomWidth: 1, borderBottomColor: 'lightgray' }}>\n              <TouchableOpacity onPress={() => this.props.navigation.navigate('Deck', {deck: item})}>\n                <View>\n                  <Text style={{textAlign: 'center', fontSize: 18, color: 'black', paddingVertical: 10, fontWeight: 'bold' }}>{item.title}</Text>\n                  <Text style={{textAlign: 'center', fontSize: 16, color: 'darkgray' }}>{Object.keys(item.flashcards || {}).length} cards</Text>\n                </View>\n              </TouchableOpacity>\n            </View>\n          )\n        }}\n        keyExtractor={(item) => item.id}\n      />\n    );\n  }\n}\n\nfunction mapStateToProp(state) {\n  return state;\n}\n\nexport default connect(mapStateToProp)(DeckList)\n"]},"metadata":{},"sourceType":"module"}