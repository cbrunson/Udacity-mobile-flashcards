{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\n\nfunction generateUID() {\n  return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n}\n\nvar storageKey = '@mobile-flashcards:data';\n\nfunction formatCard(question, answer) {\n  return {\n    id: generateUID(),\n    question: question,\n    answer: answer\n  };\n}\n\nfunction formatDeck(title, newId) {\n  newId ? outId = newId : outId = generateUID();\n  return {\n    id: outId,\n    title: title,\n    flashcards: {}\n  };\n}\n\nfunction getDecksFromStorage() {\n  var decks;\n  return _regeneratorRuntime.async(function getDecksFromStorage$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(storageKey));\n\n        case 2:\n          decks = _context.sent;\n\n          if (decks) {\n            _context.next = 5;\n            break;\n          }\n\n          return _context.abrupt(\"return\", {});\n\n        case 5:\n          return _context.abrupt(\"return\", JSON.parse(decks));\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport function _getDecks() {\n  var decks;\n  return _regeneratorRuntime.async(function _getDecks$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(getDecksFromStorage());\n\n        case 2:\n          decks = _context2.sent;\n\n          if (!(Object.keys(decks).length === 0)) {\n            _context2.next = 5;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", {});\n\n        case 5:\n          return _context2.abrupt(\"return\", decks);\n\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction _saveDecks(decks) {\n  return _regeneratorRuntime.async(function _saveDecks$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem(storageKey, JSON.stringify(decks)));\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport function _addDeck(title) {\n  var formattedDeck, decks;\n  return _regeneratorRuntime.async(function _addDeck$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          formattedDeck = formatDeck(title);\n          _context4.next = 3;\n          return _regeneratorRuntime.awrap(getDecksFromStorage());\n\n        case 3:\n          decks = _context4.sent;\n          decks[formattedDeck.id] = formattedDeck;\n          _context4.next = 7;\n          return _regeneratorRuntime.awrap(_saveDecks(decks));\n\n        case 7:\n          return _context4.abrupt(\"return\", formattedDeck);\n\n        case 8:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function _deleteDeck(deckId) {\n  var decks;\n  return _regeneratorRuntime.async(function _deleteDeck$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return _regeneratorRuntime.awrap(getDecksFromStorage());\n\n        case 2:\n          decks = _context5.sent;\n          delete decks[deckId];\n          _context5.next = 6;\n          return _regeneratorRuntime.awrap(_saveDecks(decks));\n\n        case 6:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function _addFlashcard(deckId, question, answer) {\n  var formattedCard, decks;\n  return _regeneratorRuntime.async(function _addFlashcard$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          formattedCard = formatCard(question, answer);\n          _context6.next = 3;\n          return _regeneratorRuntime.awrap(getDecksFromStorage());\n\n        case 3:\n          decks = _context6.sent;\n          decks[deckId].flashcards[formattedCard.id] = formattedCard;\n          _context6.next = 7;\n          return _regeneratorRuntime.awrap(_saveDecks(decks));\n\n        case 7:\n          return _context6.abrupt(\"return\", formattedCard);\n\n        case 8:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["/Users/carlbrunson/Documents/Code/Udacity-mobile-flashcard-app/utils/_DATA.js"],"names":["generateUID","Math","random","toString","substring","storageKey","formatCard","question","answer","id","formatDeck","title","newId","outId","flashcards","getDecksFromStorage","AsyncStorage","getItem","decks","JSON","parse","_getDecks","Object","keys","length","_saveDecks","setItem","stringify","_addDeck","formattedDeck","_deleteDeck","deckId","_addFlashcard","formattedCard"],"mappings":"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","sourcesContent":["import { AsyncStorage } from 'react-native';\n\nfunction generateUID() {\n  return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)\n}\n\nconst storageKey = '@mobile-flashcards:data'\n\nfunction formatCard(question, answer) {\n  return {\n    id: generateUID(),\n    question: question,\n    answer: answer,\n  }\n}\n\nfunction formatDeck(title, newId) {\n  \n  newId ? outId = newId: outId = generateUID();\n  \n  return {\n    id: outId,\n    title: title,\n    flashcards: {}\n  }\n}\n\nasync function getDecksFromStorage() {\n  const decks = await AsyncStorage.getItem(storageKey);\n  if (!decks) {\n    return {};\n  }\n  return JSON.parse(decks);\n}\n\nexport async function _getDecks() {\n  const decks = await getDecksFromStorage();\n  if (Object.keys(decks).length === 0) {\n    return {}\n  }\n  return decks;\n}\n\nasync function _saveDecks(decks) {\n  await AsyncStorage.setItem(storageKey, JSON.stringify(decks));\n}\n\nexport async function _addDeck(title) {\n  const formattedDeck = formatDeck(title)\n  const decks = await getDecksFromStorage();\n  decks[formattedDeck.id] = formattedDeck;\n  await _saveDecks(decks);\n  return formattedDeck;\n}\n\nexport async function _deleteDeck(deckId) {\n  const decks = await getDecksFromStorage();\n  delete decks[deckId];\n  await _saveDecks(decks);\n}\n\n\nexport async function _addFlashcard(deckId, question, answer) {\n    const formattedCard = formatCard(question, answer);\n    const decks = await getDecksFromStorage();\n    decks[deckId].flashcards[formattedCard.id] = formattedCard;\n    await _saveDecks(decks);\n    return formattedCard;\n  // return new Promise((res, rej) => {\n  //   const formattedCard = formatCard({question, answer});\n\n  //   setTimeout(() => {\n  //     decks[deckId].flashcards[formattedCard.id] = formattedCard;\n  //     res({deckId: deckId, card: formattedCard});\n  //   }, 1000)\n  // })\n}\n\n"]},"metadata":{},"sourceType":"module"}